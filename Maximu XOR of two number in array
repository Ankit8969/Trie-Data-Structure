struct Node{
  Node* bits[2];
  Node(){
    bits[0] = bits[1] = NULL;
  }
};

void insert(int num, Node* root)
{
  for(int i = 31;i>=0;i--){
    int bit = (num >>i) & 1;
    if (root->bits[bit] == NULL)
    root->bits[bit] = new Node();
    root = root->bits[bit];
  }
}

int give_search(int num, Node* node)
{
    int maxNum = 0; 
    for(int i = 31;i>=0;i--) {
        int bit = (num >>i) & 1;
        if(node->bits[!bit]) {
            maxNum = maxNum | (1<<i); 
            node = node->bits[!bit]; 
        }
        else {
            node = node->bits[bit]; 
        }
    }
    return maxNum; 
}

class Solution {
public:
    int findMaximumXOR(vector<int>& v) {
        int n = (int)v.size();
        Node* root = new Node();

        for (int i=0;i<n;i++)
            insert(v[i], root);
        
        long long ans = 0;
        for (int i=0;i<n;i++){
            long long t =give_search(v[i], root);
            ans = max(ans, t);
        }
        return ans;
    }
};


